# name: ci 
# on:
#   push:
#     branches:
#       - master 
#       - main
# permissions:
#   contents: write
# jobs:
#   deploy:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v4
#         with:
#           fetch-depth: 0
#           sparse-checkout: |
#             docs
#             includes
#       - uses: actions/setup-python@v4
#         with:
#           python-version: 3.x
#       - run: echo "cache_id=$(date --utc '+%V')" >> $GITHUB_ENV 
#       - uses: actions/cache@v3
#         with:
#           key: mkdocs-material-${ env.cache_id }
#           path: .cache
#           restore-keys: |
#             mkdocs-material-
#       - run: pip install mkdocs-git-revision-date-localized-plugin
#       - run: pip install mkdocs-git-authors-plugin
#       - run: pip install mkdocs-git-committers-plugin-2
#       - run: pip install markdown-callouts
#       # - run: pip install mkdocs-minify-plugin
#       - run: pip install mkdocs-rss-plugin
#       - run: pip install requests>=2.25.0
#       - run: pip install python-dateutil>=2.8.0
#       - run: pip install cachetools>=4.2.0
#       # - run: pip install mkdocs-open-in-new-tab
#       - run: pip install pymdown-extensions
#       # - run: pip install mkdocs-glightbox
#       # - run: pip install "mkdocs-material[imaging]"
#       # - run: pip install mkdocs-statistics-plugin        
#       - run: pip install mkdocs-material 
#       - run: pip install --upgrade --force-reinstall mkdocs-material
#       - run: mkdocs gh-deploy --force

name: ci 
on:
  push:
    branches:
      - master 
      - main
    # 避免因 AI 缓存提交触发无限循环
    paths-ignore:
      - '.ai_cache/**'
  # 移除 pull_request 触发，减少不必要的构建
permissions:
  contents: write
jobs:
  deploy:
    runs-on: ubuntu-latest
    # 设置总体超时时间（15分钟，适合中等规模项目）
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # 移除 sparse-checkout，确保所有文件都被检出
      - uses: actions/setup-python@v5  # 更新到最新版本
        with:
          python-version: '3.11'  # 使用具体版本号
      
      - name: Set cache ID
        run: echo "cache_id=$(date --utc '+%V')" >> $GITHUB_ENV 
      
      - uses: actions/cache@v4  # 更新到最新版本
        with:
          key: mkdocs-material-${{ github.run_number }}
          path: |
            .cache
            ~/.cache/pip
          restore-keys: |
            mkdocs-material-
      
      # 使用 requirements.txt 安装依赖（更高效）
      - name: Install dependencies
        timeout-minutes: 5  # 依赖安装通常2-3分钟足够
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      # 预构建测试，快速失败
      - name: Test build (without AI)
        timeout-minutes: 3  # 测试构建应该很快
        run: |
          # 临时禁用 AI 摘要进行快速测试构建
          export AI_SUMMARY_CI_ENABLED=false
          mkdocs build --strict
      
      - name: Deploy (AI Summary Disabled)
        timeout-minutes: 8  # 部署步骤，包含构建和推送
        # env:
        #   # AI摘要开关控制
        #   AI_SUMMARY_CI_ENABLED: 'true'           
        #   AI_SUMMARY_CI_ONLY_CACHE: 'true'        # 优先使用缓存，减少 API 调用
        #   AI_SUMMARY_CI_FALLBACK: 'true'          
        #   AI_SUMMARY_CACHE_ENABLED: 'true'        
        #   AI_SUMMARY_CACHE_EXPIRE_DAYS: '30'      
        #   AI_SUMMARY_CACHE_AUTO_CLEAN: 'true'     
        #   # API密钥配置
        #   GLM_API_KEY: ${{ secrets.GLM_API_KEY }}
        #   OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          # 使用 timeout 命令作为额外保护（6分钟）
          timeout 360 mkdocs gh-deploy --force || {
            echo "❌ 部署超时或失败"
            exit 1
          }
      
      # 有条件的缓存提交（避免无限循环）- 已禁用 AI 摘要功能
      # - name: Auto-commit AI cache (if any new files)
      #   timeout-minutes: 5
      #   # 只在有新缓存且不是由机器人提交触发时才执行
      #   if: github.actor != 'github-actions[bot]'
      #   run: |
      #     if [ -d ".ai_cache" ] && [ "$(ls -A .ai_cache 2>/dev/null)" ]; then
      #       git config --local user.email "action@github.com"
      #       git config --local user.name "GitHub Action"
      #       git add .ai_cache/
      #       if ! git diff --cached --quiet; then
      #         git commit -m "🤖 Auto-update AI summary cache [skip ci]"
      #         # 使用 timeout 保护推送操作
      #         timeout 300 git push || {
      #           echo "⚠️ 缓存推送超时，跳过此步骤"
      #           exit 0  # 不让整个工作流失败
      #         }
      #         echo "✅ 自动提交了新的 AI 缓存文件"
      #       else
      #         echo "ℹ️ 没有新的缓存文件需要提交"
      #       fi
      #     else
      #       echo "ℹ️ 没有找到缓存目录或缓存为空"
      #     fi